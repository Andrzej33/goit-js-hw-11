{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAQoC,SAA3BC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAdPJ,EAAAY,OAAOC,KAAK,CAAEC,QAAS,IAAMX,SAAU,eAAgBY,MAAO,UAoBT,IAA/CC,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,MAAMC,QAAU,OACrBJ,EAAKG,MAAME,cAAgB,SAC3BL,EAAKG,MAAMG,WAAa,WACxBN,EAAKG,MAAMI,IAAM,OAIYP,EAAxBQ,iBAAiB,UAAU,SAAAC,GAC9BA,EAAIC,iBAU4D,IANzC,IAAjBC,EAAkBC,OAAOZ,EAAKZ,MAAMyB,OACpCC,EAAiBF,OAAOZ,EAAKe,KAAKF,OAClCG,EAAmBhB,EAAKiB,OAAOJ,MAI5BK,EAAI,EAAGA,EAAIF,EAAkBE,IACpChC,EAAcgC,EAAI,EAAGJ,EAAiBI,EAAIP,GACvCQ,MAAK,SAAAC,G,IAAGjC,EAAQiC,EAARjC,SAAUC,EAAKgC,EAALhC,MACjBJ,EAAAY,OAAOyB,QAAQ,uBAAwCC,OAAfnC,EAAS,QAAYmC,OAANlC,EAAM,M,IAE9DmC,OAAM,SAAAH,G,IAAGjC,EAAQiC,EAARjC,SAAUC,EAAKgC,EAALhC,MAClBJ,EAAAY,OAAO4B,QAAQ,sBAAqCF,OAAfnC,EAAS,QAAYmC,OAANlC,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// Ініціалізація налаштувань бібліотеки\n\nNotify.init({ timeout: 4000, position: 'right-bottom', width: '220px' });\n\n// Функція для виклику та повернення промісу\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Отримуємо посилання на форму і додаємо мінімальне оформлення\n\nconst form = document.querySelector('.form');\n\nform.style.display = 'flex';\nform.style.flexDirection = 'column';\nform.style.alignItems = 'baseline';\nform.style.gap = '10px';\n\n// Додаємо слухача на підписку форми\n\nform.addEventListener('submit', evt => {\n  evt.preventDefault();\n\n  // Отримуємо значення з форми\n\n  const delayDenotation = Number(form.delay.value);\n  const stepDenotation = Number(form.step.value);\n  const amountDenotation = form.amount.value;\n\n  // Перебираємо в циклі кількість промісів і створюємо один на кожній ітерації\n\n  for (let i = 0; i < amountDenotation; i++) {\n    createPromise(i + 1, stepDenotation * i + delayDenotation)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","Notify","init","timeout","width","$ce04d3a99e08e73b$var$form","document","querySelector","style","display","flexDirection","alignItems","gap","addEventListener","evt","preventDefault","delayDenotation","Number","value","stepDenotation","step","amountDenotation","amount","i","then","param","success","concat","catch","failure"],"version":3,"file":"03-promises.3e2ce33f.js.map"}